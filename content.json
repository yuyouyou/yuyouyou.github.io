[{"title":"浏览器的重绘与重排","date":"2016-06-08T08:39:04.000Z","path":"2016/06/08/sixth-article/","text":"在前端开发中，性能优化是非常重要的一个环节，而谈到性能优化，我们就不得不了解一下浏览器的重绘与重排概念。 通常在 文档初次加载时，浏览器引擎会解析HTML文档来构建DOM树，之后根据DOM元素的几何属性构建一棵用于渲染的树。渲染树的每个节点都有大小和边距等属 性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了，再 根据渲染树节点的样式属性绘制出页面。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次 计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。 重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。 重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作： DOM元素的几何属性变化 当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染 树重新绘制这部分页面。而且，当前元素的重排也许会带来相关元素的重排。例如，容器节点的渲染树改变时，会触发子节点的重新计算，也会触发其后续兄弟节点 的重排，祖先节点需要重新计算子节点的尺寸也会产生重排。最后，每个元素都将发生重绘。可见，重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系 列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。 DOM树的结构变化 当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。 通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元 素，则不会影响到前面的元素。 获取某些属性 浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这 样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包 括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、 clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。 开发中，比较好的实践是尽量减少重排次数和缩小重排的影响范围。例如： 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。 需要多次重排的元素，position值最好为absolute或者fix，让它脱离文档流，这样就不会影响其他元素。所以有动画效果的元素最好设置绝对定位。 将多次改变样式属性的操作合并为一次操作，也就是将需要改变的的样式写在css中，并给一个类名，在js中只需要改变className即可。 由于display为none的元素不再渲染树中，对隐藏元素的操作不会引发其他元素的重排。如果要对一个元素进行复杂操作，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。 需要增加多个节点，可以一次性构建一个html片段，然后一次性添加到文档中去，而不是循环添加每一行。","tags":[{"name":"性能优化","slug":"性能优化","permalink":"http://yuyouyou.github.io/tags/性能优化/"},{"name":"前端","slug":"前端","permalink":"http://yuyouyou.github.io/tags/前端/"}]},{"title":"windows下MongoDB的安装及配置","date":"2016-04-05T05:49:50.000Z","path":"2016/04/05/fifth-article/","text":"1、进入mongodb官网进行软件包下载。 2、选择windows平台，如图所示： 3、将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\\mongodb）。 4、创建数据库文件的存放位置，比如d:/mongodb/data/db。启动mongodb服务之前必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。 5、打开cmd命令行，进入D:\\mongodb\\bin目录，输入如下的命令启动mongodb服务：1D:/mongodb/bin&gt;mongod --dbpath D:\\mongodb\\data\\db 6、mongodb默认连接端口27017，如果出现如图的情况，可以打开localhost:27017查看，发现如图则表示连接成功，如果不成功，可以查看端口是否被占用。 7、其实可以将MongoDB设置成Windows服务，这样每次开机MongoDB就自动启动了。 如图在d:\\mongodb\\data下新建文件夹log（存放日志文件）并且新建文件mongodb.log，在d:\\mongodb新建文件mongo.config。 8、用记事本打开mongo.config输入：12dbpath=D:\\mongodb\\data\\dblogpath=D:\\mongodb\\data\\log\\mongo.log 9、用管理员身份打开cmd命令行，进入D:\\mongodb\\bin目录，输入如下的命令：1D:\\mongodb\\bin&gt;mongod --config D:\\mongodb\\mongo.config 如果不成功可以改为如下：1mongod --config D:\\mongodb\\mongo.config --install --serviceName \"MongoDB\" 进入日志文件，查看日志发现已经成功了。如果失败有可能没有使用管理员身份，遭到拒绝访问。 10、打开cmd输入services.msc查看服务可以看到MongoDB服务，点击可以启动。如下所示：","tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"http://yuyouyou.github.io/tags/MongoDB/"}]},{"title":"smarty笔记(待续...)","date":"2016-03-23T10:19:51.000Z","path":"2016/03/23/fourth-article/","text":"日期格式 12345678910111213141516171819&#123;%$time|date_format:'%Y-%m-%d'%&#125; 格式为2016-08-03&#123;%$time|date_format:'%H:%M:%S'%&#125; 格式为14:33:00常见的：%Y 年, 数字, 4 位%y 年, 数字, 2 位%m 月份, 数字(01……12)%c 月份, 数字(1……12)%b 缩写的月份名字(Jan……Dec)%d 月份中的天数, 数字(00……31)%e 月份中的天数, 数字(0……31)%H 小时(00……23)%k 小时(0……23)%I 小时(01……12)%l 小时(1……12)%M 分钟(00……59)%S 秒(00……59)%w 星期名字(Sunday……Saturday)%a 缩写的星期名字(Sun……Sat) 取循环中的特殊地方 12345678910such as:&#123;%foreach $item.tags as $tag name=tags%&#125; &#123;%if $smarty.foreach.tags.last%&#125;,&#123;%/if%&#125;&#123;%/foreach%&#125;index表示当前数组索引，从0开始计算iteration表示当前循环次数，从1开始计算first表示第一个last表示最后一个total表示循环总次数 strip去除多余空格 123456$articleTitle=‘Grandmother of\\neight makes\\t hole in one.’&#123;%$articleTitle%&#125; Grandmother of eight makes hole in one.&#123;%$articleTitle|strip%&#125; Grandmother of eight makes hole in one.&#123;%$articleTitle|strip:\"&amp;nbsp;\"%&#125; Grandmother&amp;nbsp;of&amp;nbsp;eight&amp;nbsp;makes&amp;nbsp;hole&amp;nbsp;in&amp;nbsp;one. strip_tags去除html标签 1234$articleTitle=‘Blind Woman Gets &lt;font face=\\\"helvetica\\\"&gt;New Kidney&lt;/font&gt; from Dad she Hasn't Seen in &lt;b&gt;years&lt;/b&gt;.’&#123;%$articleTitle%&#125; Blind Woman Gets &lt;font face=\"helvetica\"&gt;New Kidney&lt;/font&gt; from Dad she Hasn't Seen in &lt;b&gt;years&lt;/b&gt;.&#123;%$articleTitle|strip_tags%&#125; Blind Woman Gets New Kidney from Dad she Hasn't Seen in years. assign 为模板变量赋值 1234&#123;%assign var=\"name\" value=\"Bob\"%&#125;The value of $name is &#123;$name&#125;.The value of $name is Bob. string_format 字符串格式化（保留小数位） 123&#123;%$number%&#125; 23.5787446&#123;%$number|string_format:\"%.2f\"%&#125; 23.58&#123;%$number|string_format:\"%d\"%&#125; 24 default设置默认值 1&#123;%$user.name|default:'暂无'%&#125; replace 替换 1234$tags=\"设计，音乐\"&#123;$tags&#125; 设计，音乐&#123;$tags|replace:\"，\":\",\"&#125; 设计,音乐 section,sectionelse遍历数组中的数据 它的属性分别是：name表示循环的名称，loop决定循环次数的变量名称或者直接给定循环次数（loop=3），start表示循环执行的初始位置. 如果该值为负数，开始位置从数组的尾部算起，step决定循环的步长， 例如指定step=2将只遍历下标为0、2、4等的元素，max表示循环最大执行次数，show决定是否显示该循环。 12345&#123;section name=customer loop=$custid&#125;id: &#123;$custid[customer]&#125;&lt;br&gt;&#123;sectionelse&#125;there are no values in $custid.&#123;/section&#125;","tags":[{"name":"smarty","slug":"smarty","permalink":"http://yuyouyou.github.io/tags/smarty/"}]},{"title":"前端冷知识(持续更新...)","date":"2016-02-18T02:44:36.000Z","path":"2016/02/18/third-article/","text":"浏览器地址栏运行JavaScript代码 1javascript:alert('hello from address bar :)'); 浏览器地址栏运行HTML代码 1data:text/html,&lt;h1&gt;Hello, world!&lt;/h1&gt; 把浏览器当编辑器 12地址栏输入：data:text/html, &lt;html contenteditable&gt;控制台输入：document.body.contentEditable='true'; 实时编辑CSS 12345678&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;body&gt; &lt;style style=\"display:block\" contentEditable&gt; body &#123; color: blue &#125; &lt;/style&gt; &lt;/body&gt;&lt;/html&gt; 生成随机字符串 12345function generateRandomAlphaNum(len) &#123; var rdmString = \"\"; for (; rdmString.length &lt; len; rdmString += Math.random().toString(36).substr(2)); return rdmString.substr(0, len);&#125;","tags":[{"name":"前端","slug":"前端","permalink":"http://yuyouyou.github.io/tags/前端/"}]},{"title":"hexo常用命令","date":"2016-02-10T07:42:45.000Z","path":"2016/02/10/second-article/","text":"hexo npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 简写 hexo n “我的博客” == hexo new “我的博客” #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署 服务器 hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo g #生成静态网页 hexo d #开始部署 监视文件变动 hexo generate #使用 Hexo 生成静态文件快速而且简单 hexo generate –watch #监视文件变动 完成后部署两个命令的作用是相同的 hexo generate –deploy hexo deploy –generate 模版 hexo new “postName” #新建文章 hexo new page “pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub 设置文章摘要以上是文章摘要 以下是余下全文","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yuyouyou.github.io/tags/hexo/"}]},{"title":"GitHub+Hexo搭建个人博客","date":"2015-09-23T02:47:40.000Z","path":"2015/09/23/first-article/","text":"准备工作 安装Git 安装Node.js PS：傻瓜式的安装即可。。。 申请GitHub 进入GitHub官网注册帐号 注册完成后，点击”New repository”，新建一个版本库 输入Repository name:yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了) 启用GitHub Page 1、点击“Setting”菜单进入设置,点击”Launch automatic page generator”,如下所示： 2、点击底部的”Continue to layouts”3、点击”Publish page”,发布github默认生成的一个静态站点4、最后可以看到成功后的界面，还可以自己修改主题： 安装Hexo安装Hexo 在电脑上新建一个blog文件夹,该文件夹用于存放博客文件,然后右键单击选择“Git Bash”，执行以下命令： 使用淘宝NPM镜像 1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 使用淘宝NPM安装Hexo 1$ cnpm install -g hexo-cli 1$ cnpm install hexo --save 检查安装成功否1$ hexo -v 本地运行hexo 初始化hexo 1$ hexo init 安装生成器 1$ cnpm install 运行hexo（以后要在本地运行博客只要输入该命令即可） 1$ hexo s -g 打开浏览器，输入localhost:4000,就可以在本地看到你的个人博客了 配置blog 打开blog/_config.yml文件，进行配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#博客名称title: 我的博客#副标题subtitle: 副标题#简介description: 简介#博客作者author: 作者#博客语言language: zh-CN#时区timezone:#博客地址,与申请的GitHub一致url: http://yuyouyou.github.io#博客链接格式permalink: :year/:month/:day/:title/permalink_defaults:source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:default_category: uncategorizedcategory_map:tag_map:#日期格式date_format: YYYY-MM-DDtime_format: HH:mm:ss#分页，每页文章数量per_page: 10pagination_dir: page#博客主题theme: landscape#发布设置deploy: type: git #elfwalk改为你的github用户名 repository: https://github.com/yuyouyou/yuyouyou.github.io.git branch: master 创建一篇文章并用编辑器编辑 1$ hexo new \"hello\" 发布博客 设置git身份信息 12$ git config --global user.name \"你的用户名\"$ git config --global user.email \"你的邮箱\" 安装hexo git插件 1$ cnpm install hexo-deployer-git --save 发布更新博客 1$ hexo d -g 发布成功后，访问yourname.github.io看下成果吧","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yuyouyou.github.io/tags/hexo/"}]}]